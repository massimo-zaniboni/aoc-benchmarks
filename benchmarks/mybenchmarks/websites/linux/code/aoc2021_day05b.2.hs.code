
-- SPDX-License-Identifier: ISC
-- Copyright (c) 2021 Paolo Martini &lt;mrtnpaolo&#64;protonmail.com&gt;

{-# LANGUAGE ImportQualifiedPost, TypeApplications #-}

module Main (main) where

import Data.List                      (partition,foldl&apos;)
import Data.Map.Strict qualified as M&apos; (empty,insertWith,elems)

import Data.Ix
import GHC.Arr
import Data.Map (Map)
import qualified Data.Map as M
import Data.Foldable (toList)

import Data.Map.Strict qualified as M&apos; (toAscList,fromListWith)

orthogonal (C y x,C y&apos; x&apos;) = y == y&apos; || x == x&apos;

line (from,to) = ray from
  where
    ray c | c == to = [to] | otherwise = c : ray (c `addCoord` step)

    step = unit (to `addCoord` neg from)

    unit (C y x) = C (signum y) (signum x)
    neg  (C y x) = C (-y) (-x)

main =
  do inp &lt;- getInputLines parse 5
     let (ort,dia) = partition orthogonal inp
     print (part2 (ort ++ dia))
  where
    parse xs = (C y x,C y&apos; x&apos;)
      where
        sep x | x `elem` &quot;,-&gt;&quot; = &apos; &apos; | otherwise = x
        [x,y,x&apos;,y&apos;] = map (read &#64;Int) . words . map sep $ xs

part1 pairs = count (&gt;= 2) (M&apos;.elems m)
  where
    m = foldl&apos; (\m c -&gt; M&apos;.insertWith (+) c 1 m) M&apos;.empty (concatMap line pairs)

part2 = part1


-- Utilities

getInput :: (String -&gt; a) -&gt; Int -&gt; IO a
getInput parse day = parse &lt;$&gt;  getContents

getInputLines :: (String -&gt; a) -&gt; Int -&gt; IO [a]
getInputLines parse day = getInput (map parse . lines) day

count :: (a -&gt; Bool) -&gt; [a] -&gt; Int
count p xs = foldl&apos; f 0 xs
  where
    f n x | p x = n+1 | otherwise = n

-- ---------------------------
-- Coord

-- | Row-major coordinates
data Coord = C !Int !Int
  deriving (Read, Show, Eq, Ord)

origin, north, east, south, west :: Coord
origin = C 0 0
north  = C (-1) 0
east   = C 0 1
south  = C 1 0
west   = C 0 (-1)

coordRow, coordCol :: Coord -&gt; Int
coordRow (C row _) = row
coordCol (C _ col) = col

invert :: Coord -&gt; Coord
invert (C y x) = C x y

above, right, below, left :: Coord -&gt; Coord
above (C y x) = C (y-1) x
right (C y x) = C y (x+1)
below (C y x) = C (y+1) x
left  (C y x) = C y (x-1)

turnLeft, turnRight, turnAround :: Coord -&gt; Coord
turnLeft   (C y x) = C (-x) y
turnRight  (C y x) = C x (-y)
turnAround (C y x) = C (-y) (-x)

cardinal :: Coord -&gt; [Coord]
cardinal c = c `seq`
  [above c, right c, below c, left c]

neighbors :: Coord -&gt; [Coord]
neighbors c = c `seq`
  [ above c, left c, right c, below c
  , above (left c), above (right c)
  , below (left c), below (right c) ]

bookreading :: Coord -&gt; [Coord]
bookreading c = c `seq`
  [ above (left c), above c, above (right c)
  , left c        , c      , right c
  , below (left c), below c, below (right c) ]

manhattan :: Coord -&gt; Coord -&gt; Int
manhattan (C y x) (C v u) = abs (y-v) + abs (x-u)

addCoord :: Coord -&gt; Coord -&gt; Coord
addCoord (C y x) (C v u) = C (y+v) (x+u)

scaleCoord :: Int -&gt; Coord -&gt; Coord
scaleCoord n (C y x) = C (n*y) (n*x)

instance Ix Coord where
  unsafeIndex (C ym xm,C _yM xM) (C y x) =
    (y - ym) * (xM - xm + 1) + (x - xm)

  inRange (C ym xm,C yM xM) (C y x) =
    ym &lt;= y &amp;&amp; y &lt;= yM &amp;&amp; xm &lt;= x &amp;&amp; x &lt;= xM

  range (C ym xm,C yM xM) =
    [ C y x | y &lt;- [ym,ym+1..yM], x &lt;- [xm,xm+1..xM] ]

boundingBox :: Foldable t =&gt; t Coord -&gt; Maybe (Coord,Coord)
boundingBox t =
  case toList t of
    []         -&gt; Nothing
    C y x : cs -&gt; Just $ go x y x y cs
    where
      go xm ym xM yM [] = (C ym xm,C yM xM)
      go xm ym xM yM (C y x : cs) =
        go (min xm x) (min ym y) (max xM x) (max yM y) cs

drawCoords :: Map Coord Char -&gt; String
drawCoords pixels =
  unlines [ [ pixel (C y x) | x &lt;- [xm..xM]] | y &lt;- [ym..yM] ]
  where
    pixel c = M.findWithDefault &apos; &apos; c pixels
    Just (C ym xm,C yM xM) = boundingBox (M.keys pixels)

showCoords :: Foldable t =&gt; t Coord -&gt; String
showCoords t = drawCoords $ M.fromList [ (c,&apos;#&apos;) | c &lt;- toList t ]

withCoords :: (Char -&gt; a) -&gt; [String] -&gt; [(Coord,a)]
withCoords f rows = concat $
  [ [ (C y x, f c) | (x,c) &lt;- zip [0..] xs ] | (y,xs) &lt;- zip [0..] rows ]
