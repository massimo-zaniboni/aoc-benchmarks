
{-# LANGUAGE TypeApplications #-}

-- SPDX-License-Identifier: ISC
-- Copyright (c) 2021 Paolo Martini &lt;mrtnpaolo&#64;protonmail.com&gt;

module Main (main) where

import Data.List (foldl&apos;)
import Data.Map.Strict qualified as M&apos; (toAscList,fromListWith)

main =
  do crabs &lt;- getInput parse 7
     print (part2 crabs)
  where
    parse xs = read &#64;[Int] $ &apos;[&apos;:xs++&quot;]&quot;

optimal cost xs = minimum (map cost [minimum xs..maximum xs])

part2 xs = optimal (\x -&gt; sum [ triangle (abs (n-x)) | n &lt;- xs]) xs
  where
    triangle n = n*(n+1)`div`2

-- Utilities

getInput :: (String -&gt; a) -&gt; Int -&gt; IO a
getInput parse day = parse &lt;$&gt;  getContents
